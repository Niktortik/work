{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Niktortik/work/blob/special/final_project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eL3IdGyqiJfD"
      },
      "outputs": [],
      "source": [
        "# Импорт библиотек для расчета A/B теста\n",
        "import pandas as pd\n",
        "from scipy.stats import ttest_ind\n",
        "from scipy.stats import shapiro\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import scipy.stats\n",
        "\n",
        "\n",
        "# Для SQL\n",
        "import pandahouse as ph"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8vafeQ5niJfE"
      },
      "source": [
        "Примем гипотезы <br> H0 - новая механика не повлияла на доход или он упал <br> H1 - новая механика позволила увеличить доход\n",
        "\n",
        "Принимаем уровень значимости alpha = 0.05 <br>\n",
        "Что подразумевает если уровень значимости (p) который мы расчитаем меньше уровня значимости который мы задали, то с вероятностью 95% можно сказать отвергаем H0 и 5% - вероятность совершить ошибку первого рода согласно ЦПТ. Другими словами чем меньше p-значение, тем больше оснований отклонить нулевую гипотезу.\n",
        "\n",
        "Основная метрика на которую будем смотреть это доход, прокси метрика это конверсия. Т.к. конверсия может быть выше но товары покупались по более низкой стоимости."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g9wv3959iJfF"
      },
      "source": [
        "# Задание 1. A/B–тестирование"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LOdN3qgeiJfG"
      },
      "source": [
        "1.1 Условие\n",
        "\n",
        "Одной из основных задач аналитика в нашей команде является корректное проведение экспериментов. Для этого мы применяем метод A/B–тестирования. В ходе тестирования одной гипотезы целевой группе была предложена новая механика оплаты услуг на сайте, у контрольной группы оставалась базовая механика. В качестве задания Вам необходимо проанализировать итоги эксперимента и сделать вывод, стоит ли запускать новую механику оплаты на всех пользователей."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "teiKppZviJfG"
      },
      "source": [
        "1.2 Входные данные\n",
        "\n",
        "В качестве входных данных Вы имеете 4 csv-файла:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Svd5gzfBiJfG"
      },
      "outputs": [],
      "source": [
        "# Импорт данных\n",
        "groups = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-ni-m/final_project/groups.csv', sep=';') # файл с информацией о принадлежности пользователя к контрольной или экспериментальной группе (А – контроль, B – целевая группа)\n",
        "groups_add = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-ni-m/final_project/groups_add.csv') # дополнительный файл с пользователями, который вам прислали спустя 2 дня после передачи данных\n",
        "active_studs = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-ni-m/final_project/active_studs.csv') # файл с информацией о пользователях, которые зашли на платформу в дни проведения\n",
        "checks = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-ni-m/final_project/checks.csv', sep=';') # файл с информацией об оплатах пользователей в дни проведения эксперимента"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ChAoA7t1iJfG"
      },
      "outputs": [],
      "source": [
        "alpha = 0.05 # задаем уровень значимости"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4BnWqQYgiJfH"
      },
      "outputs": [],
      "source": [
        "# Проверим данные и узнаем более подробно об их структуре и отсутствующих значениях"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "xTzqAdrbiJfH",
        "outputId": "b10a7eb0-be58-47e7-93a3-d647b2d7f301"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "id     0\n",
              "grp    0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 254,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "groups.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YMAepq_viJfI",
        "outputId": "5a0be099-bc24-4108-aab1-a93e58b16ded"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "id     0\n",
              "grp    0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 255,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "groups_add.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "v6eArlBeiJfI",
        "outputId": "d7771745-4914-46d8-a5ea-8ec73596d828"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "student_id    0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 256,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "active_studs.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tIiyolgciJfI",
        "outputId": "ccdd87ca-771d-4cdf-db47-881c778d203a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "student_id    0\n",
              "rev           0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 257,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "checks.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PgkOnJX9iJfI",
        "outputId": "45739aff-6b69-493f-d93c-9382ca900214"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "B    80.303152\n",
              "A    19.696848\n",
              "Name: grp, dtype: float64"
            ]
          },
          "execution_count": 258,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Проверим группы на соотношение участников тестовой и контрольной\n",
        "groups.grp.value_counts(normalize=True) * 100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": false,
        "id": "JllQOmKNiJfJ",
        "outputId": "1027316f-68c4-443f-d47e-897b64bc9b6c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "B    76.086957\n",
              "A    23.913043\n",
              "Name: grp, dtype: float64"
            ]
          },
          "execution_count": 259,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Проверим группы на соотношение участников тестовой и контрольной\n",
        "groups_add.grp.value_counts(normalize=True) * 100\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9GxvI-tjiJfJ"
      },
      "source": [
        "Предобработка данных"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "R7jAxC-GiJfJ",
        "outputId": "99383ce9-b441-4892-c910-02c5b8693efd"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>grp_x</th>\n",
              "      <th>grp_y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [id, grp_x, grp_y]\n",
              "Index: []"
            ]
          },
          "execution_count": 260,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#Проверим с помощью merge пересечение id в groups и groups_add\n",
        "common_ids = pd.merge(groups, groups_add, on='id', how='inner')\n",
        "common_ids\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ghACehBPiJfJ"
      },
      "source": [
        "Таблица пустая получается пересечения id нет, необходимо использовать метод pd.cocat для соединения двух таблиц т.к. не сказано что данные не относятся к этому эксперементу или проведены в другой день"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wSHYXzICiJfJ"
      },
      "outputs": [],
      "source": [
        "all_group = pd.concat([groups, groups_add]) # соединяем груп + груп адс"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V-BlYR75iJfK"
      },
      "source": [
        "Далее у нас есть таблица с пользователями которые заходили в день эксперемента на площадку тоесть на которых проводился тест <br> Нам нужно соеденить таблицу с разбивкой по группам с таблицой активных пользователей"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Pws3fsCyiJfK"
      },
      "outputs": [],
      "source": [
        "# переименуем колонки\n",
        "checks = checks.rename(columns={'student_id': 'id'})\n",
        "active_studs = active_studs.rename(columns={'student_id': 'id'})"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "3mzMNGmiiJfK",
        "outputId": "28e6a311-0045-4cff-998d-9388a190844b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>grp</th>\n",
              "      <th>rev</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1184303</td>\n",
              "      <td>A</td>\n",
              "      <td>1530.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3354191</td>\n",
              "      <td>B</td>\n",
              "      <td>1900.0001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3278734</td>\n",
              "      <td>B</td>\n",
              "      <td>1900.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>720651</td>\n",
              "      <td>A</td>\n",
              "      <td>1980.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1232221</td>\n",
              "      <td>B</td>\n",
              "      <td>1900.0000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        id grp        rev\n",
              "0  1184303   A  1530.0000\n",
              "1  3354191   B  1900.0001\n",
              "2  3278734   B  1900.0000\n",
              "3   720651   A  1980.0000\n",
              "4  1232221   B  1900.0000"
            ]
          },
          "execution_count": 263,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# мерджим таблицу с группами и таблицу с активными студентами через иннер(берем пересечения в обеих таблицах)\n",
        "all_group_active = all_group.merge(active_studs, how='right', on='id') # активные студенты разделенные по группам\n",
        "# Активные студенты которые принесли доход\n",
        "all_pay = all_group_active.merge(checks, how='inner', on='id')\n",
        "all_pay.head() # студенты которые были и платили в дни эксперемента"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "9MCPIRgqiJfK",
        "outputId": "d37f5cb5-a6d4-482f-a3a6-722b781180bc"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>grp</th>\n",
              "      <th>rev</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1627</td>\n",
              "      <td>A</td>\n",
              "      <td>990.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3185</td>\n",
              "      <td>B</td>\n",
              "      <td>690.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25973</td>\n",
              "      <td>B</td>\n",
              "      <td>690.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>26280</td>\n",
              "      <td>B</td>\n",
              "      <td>690.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100300</td>\n",
              "      <td>B</td>\n",
              "      <td>990.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>536</th>\n",
              "      <td>5645737</td>\n",
              "      <td>B</td>\n",
              "      <td>1900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>537</th>\n",
              "      <td>5651566</td>\n",
              "      <td>B</td>\n",
              "      <td>1900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>538</th>\n",
              "      <td>5662322</td>\n",
              "      <td>B</td>\n",
              "      <td>1900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>539</th>\n",
              "      <td>5681918</td>\n",
              "      <td>B</td>\n",
              "      <td>1900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>540</th>\n",
              "      <td>5740903</td>\n",
              "      <td>B</td>\n",
              "      <td>1900.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>541 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "          id grp     rev\n",
              "0       1627   A   990.0\n",
              "1       3185   B   690.0\n",
              "2      25973   B   690.0\n",
              "3      26280   B   690.0\n",
              "4     100300   B   990.0\n",
              "..       ...  ..     ...\n",
              "536  5645737   B  1900.0\n",
              "537  5651566   B  1900.0\n",
              "538  5662322   B  1900.0\n",
              "539  5681918   B  1900.0\n",
              "540  5740903   B  1900.0\n",
              "\n",
              "[541 rows x 3 columns]"
            ]
          },
          "execution_count": 264,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "allls = all_group.merge(checks, how='inner', on='id') # всего студентов от которых были совершены платежы в дни эксперемента\n",
        "allls"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "LkgfT5aEiJfK",
        "outputId": "e35a77f1-bc44-47b6-ee7b-adaef346729a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "149"
            ]
          },
          "execution_count": 265,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "not_use = pd.concat([all_pay, allls]).drop_duplicates(keep=False) # пользователи которые не были на сайте в день эксперемента\n",
        "not_use.id.count() # пользователи которые небыли на сайте в день эксперемента"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Bg04pKhxiJfK",
        "outputId": "878fbcf7-f31f-4d9c-af6e-e84d5d98edb9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>grp</th>\n",
              "      <th>rev</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3185</td>\n",
              "      <td>B</td>\n",
              "      <td>690.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25973</td>\n",
              "      <td>B</td>\n",
              "      <td>690.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>26280</td>\n",
              "      <td>B</td>\n",
              "      <td>690.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>100645</td>\n",
              "      <td>B</td>\n",
              "      <td>630.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>102534</td>\n",
              "      <td>B</td>\n",
              "      <td>580.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       id grp    rev\n",
              "1    3185   B  690.0\n",
              "2   25973   B  690.0\n",
              "3   26280   B  690.0\n",
              "5  100645   B  630.0\n",
              "6  102534   B  580.0"
            ]
          },
          "execution_count": 266,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "not_use.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KsR5qjMjiJfL"
      },
      "source": [
        "Оценка групп пользователей которых небыло на сайте в дни эксперемента"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kDTYF8mIiJfL",
        "outputId": "bf71bdb7-c2c7-46b4-9cdf-ed8f524b36cc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "B    80.536913\n",
              "A    19.463087\n",
              "Name: grp, dtype: float64"
            ]
          },
          "execution_count": 267,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "not_use.grp.value_counts(normalize=True)*100 # соотношение группы"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7ODeEjctiJfL",
        "outputId": "74340368-4836-4f91-c580-39a506f4f2f5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "105532.0001"
            ]
          },
          "execution_count": 268,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "not_use.rev.sum() # доход пользователей"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LxfXJys8iJfL",
        "outputId": "61e6a9dc-e1df-4985-8fc1-aad2f1a60696"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "690.0000     61\n",
              "290.0000     24\n",
              "990.0000     19\n",
              "199.0000     14\n",
              "1140.0000    14\n",
              "1900.0000     4\n",
              "580.0000      4\n",
              "840.0000      3\n",
              "398.0000      2\n",
              "1900.0001     1\n",
              "1180.0000     1\n",
              "1980.0000     1\n",
              "630.0000      1\n",
              "Name: rev, dtype: int64"
            ]
          },
          "execution_count": 269,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "not_use.rev.value_counts()  # данные по количеству платежей"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xVwBbZ6hiJfL",
        "outputId": "14d4774e-bdb8-4e34-be50-ec11935dd030"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "708.2684570469798"
            ]
          },
          "execution_count": 270,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "not_use.rev.mean() # средний чек пользователей которых небыло в день эксперемента"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mJjSI3cmiJfL"
      },
      "source": [
        "Предпологаю это автоматическая оплата подписки, и т.к. у нас задача проверить реакцию пользователей на новую систему оплаты эти данные во внимание не берем"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VqOktMUmiJfL"
      },
      "source": [
        "Далее работаем с датафреймом all_pay"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E6rRPCf7iJfM"
      },
      "source": [
        "# Расчеты"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gjnryKH-iJfM"
      },
      "source": [
        "Мы можем посмотрет на наши данные сначала на графиках <br> и предположить об их нормальности для последуйщего выбора метода для анализа, но все равно нужно проверить через тест"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "RAG-r61XiJfM",
        "outputId": "8447ce38-39a2-45e9-fea4-38491d44af50"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Построение боксплот\n",
        "sns.boxplot(data=all_pay, x=\"grp\", y=\"rev\")\n",
        "\n",
        "# Добавляем название графика\n",
        "plt.title('Боксплот для групп A и B')\n",
        "\n",
        "# Добавляем название осей\n",
        "plt.xlabel('Группы')\n",
        "plt.ylabel('Доход')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NvcBVF38iJfM"
      },
      "source": [
        "Судя по графику видимо что медиана у контрольной группы (группа А) и тестовой группы (B) различаются,<br>\n",
        "но данных в группе B больше, так же нижний квартиль у тестовой группы и верхний больше чем у контрольной группы, <br> точки отображают выбрасы в каждом графике.\n",
        "Усы в каких границах данные находятся.\n",
        "По данному графику сложно сказать есть ли статистические различия т.к. данных в группе B больше. Если бы нижняя граница ящика была выше верхней тогда можно было бы более точно сказать что есть различия."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": false,
        "id": "uLqbFqHpiJfM",
        "outputId": "4fc9231e-3bfc-4a04-ce54-adcaff1ea908"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Строим гистограмму распределения дохода\n",
        "sns.histplot(data=all_pay, x=\"rev\", hue=\"grp\")\n",
        "\n",
        "# Добавляем название графика\n",
        "plt.title('Гистограмма распределения для групп A и B')\n",
        "\n",
        "# Добавляем название осей\n",
        "plt.xlabel('Доход')\n",
        "plt.ylabel('Частота')\n",
        "\n",
        "# Показываем график\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ieccs8taiJfN"
      },
      "source": [
        "По данному графику явно видно что распределение не нормальное, много данных находится у группы B с доходом около 2000.\n",
        "Ну опять же по данному графику сказать что то однозначно сложно.\n",
        "Но мы понимаем что данные распределены не нормально."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WisGvASpiJfN",
        "outputId": "3e3aa7e9-8c4e-43cb-8322-4d03afe70e5b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Доход в контрольной группе 72820.0\n",
            "Доход в тестовой группе 394974.0035\n"
          ]
        }
      ],
      "source": [
        "print('Доход в контрольной группе', all_pay.query('grp==\"A\"').rev.sum())\n",
        "print('Доход в тестовой группе', all_pay.query('grp==\"B\"').rev.sum())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FdGLl0MHiJfN"
      },
      "outputs": [],
      "source": [
        "# Запишем данные контрольной и тестовой группы в переменные\n",
        "\n",
        "kontrol = all_pay.query('grp==\"A\"').rev # контрольная группа\n",
        "test = all_pay.query('grp==\"B\"').rev # тестовая группа"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ICrt9OGLiJfO"
      },
      "source": [
        "Проверка распределения среднего для дохода в контрольной и тестовой группе"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "Uun9nLNciJfO",
        "outputId": "a26cb6ab-3613-46b8-e15b-0cd5cd04ec06"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Тест на нормальность распределения control группы: W = 0.997 , p-value = 0.000 => Нормальное\n",
            "Тест на нормальность распределения test группы: W = 1.000 , p-value = 0.956 => Не нормальное\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/opt/tljh/user/lib/python3.7/site-packages/scipy/stats/morestats.py:1760: UserWarning: p-value may not be accurate for N > 5000.\n",
            "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
          ]
        }
      ],
      "source": [
        "sample_means_control = [] # сюда записывается симуляция контрольной группы\n",
        "sample_means_target = [] # сюда записывается симуляция тестовой группы\n",
        "\n",
        "for i in range(10000):     #симулируем выборку\n",
        "  sample_control = kontrol.sample(frac=1, replace=True) #симулируем выборку\n",
        "  sample_target = test.sample(frac=1, replace=True) #симулируем выборку\n",
        "  sample_means_control.append(sample_control.mean()) # добавляем в созданые переменные\n",
        "  sample_means_target.append(sample_target.mean()) # добавляем в созданые переменные\n",
        "\n",
        "\n",
        "\n",
        "# check for normality by Shapiro-Wilk test #\n",
        "\n",
        "sp = shapiro(sample_means_control) # проводим тест Шапиро для того чтобы понять нормально ли распределение среднего значения в контрольной группе\n",
        "concl = '=> Не нормальное' if sp[1]>0.05 else '=> Нормальное'\n",
        "print('Тест на нормальность распределения control группы: W = %.3f' % sp[0], ', p-value = %.3f' % sp[1], concl)\n",
        "\n",
        "sp = shapiro(sample_means_target)# проводим тест Шапиро для того чтобы понять нормально ли распределение среднего значения в тестовой группе\n",
        "concl = '=> Не нормальное' if sp[1]>0.05 else '=> Нормальное'\n",
        "print('Тест на нормальность распределения test группы: W = %.3f' % sp[0], ', p-value = %.3f' % sp[1], concl)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wg14V1-BiJfO"
      },
      "source": [
        "Группы имеют разное распределение среднего: контрольная группа не нормальное распределение среднего а тестовая нормальное распределение среднего, поэтому невозможно применить ттест поэтому необходимо использовать бустрап."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K61OVvs-iJfO"
      },
      "source": [
        "При использовании бустрап сравним доверительные интервалы, тем самым если доверительные интервалы не пересекаются и не перекрывают ноль, значит группы имеют статистически значимое различие"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hzCko5MRiJfO"
      },
      "outputs": [],
      "source": [
        "# Бустрап симуляция для контрольной группы\n",
        "#сюда мы будем складывать результаты\n",
        "medians_kon = []\n",
        "\n",
        "#повторяем процесс 10000 раз\n",
        "for i in range(10000):\n",
        "    #симулируем выборку\n",
        "    sample_data = kontrol.sample(frac=1, replace=True)\n",
        "\n",
        "    #считаем показатель - в данном случае медиану\n",
        "    sample_median = sample_data.median()\n",
        "\n",
        "    #добавляем результат в список\n",
        "    medians_kon.append(sample_median)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TmJl9EdYiJfO"
      },
      "outputs": [],
      "source": [
        "# Бустрап симуляция для тестовой группы\n",
        "#сюда мы будем складывать результаты\n",
        "medians_test = []\n",
        "\n",
        "#повторяем процесс 10000 раз\n",
        "for i in range(10000):\n",
        "    #симулируем выборку\n",
        "    sample_data = test.sample(frac=1, replace=True)\n",
        "\n",
        "    #считаем показатель - в данном случае медиану\n",
        "    sample_median = sample_data.median()\n",
        "\n",
        "    #добавляем результат в список\n",
        "    medians_test.append(sample_median)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xDDItQH5iJfP"
      },
      "source": [
        "Определяем 95% доверительный интервал для этого определим квантили контрольной и тестовой группы"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "czK2ik7diJfP",
        "outputId": "f39d08ed-6ed1-4ec1-ef10-ecd987412f72"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "397.7875000000002\n",
            "765.0\n"
          ]
        }
      ],
      "source": [
        "print(pd.Series(medians_kon).quantile(0.025)) # квантили контрольной группы\n",
        "print(pd.Series(medians_kon).quantile(0.975))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "sCihkG40iJfP",
        "outputId": "9665bf07-e302-4568-9a66-a8d7a480cce6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "990.0\n",
            "1900.0\n"
          ]
        }
      ],
      "source": [
        "print(pd.Series(medians_test).quantile(0.025)) # # квантили тестовой группы\n",
        "print(pd.Series(medians_test).quantile(0.975))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C44dhQneiJfP"
      },
      "source": [
        "Мы можем утверждать с 95% вероятностью что группы по доходу, имеют статистические различия, т.к. интервалы не пересекаются.<br>\n",
        "Получается медианна дохода в контрольной и тестовой имею стат. значимое различие"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DBVQOQGiiJfP"
      },
      "source": [
        "Сделаем ещё один бустрап для опеределения 95% доверительного интервала разниц медиан двух групп"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hR4_x2nqiJfP"
      },
      "outputs": [],
      "source": [
        "#бустреп для разницы медиан\n",
        "median_diff = []\n",
        "\n",
        "for i in range(10000):\n",
        "    sample_data_control = kontrol.sample(frac=1, replace=True)\n",
        "    sample_median_control = sample_data_control.median()\n",
        "\n",
        "\n",
        "    sample_data_exp = test.sample(frac=1, replace=True)\n",
        "    sample_median_exp = sample_data_exp.median()\n",
        "\n",
        "    sample_median_diff = sample_median_exp - sample_median_control\n",
        "    median_diff.append(sample_median_diff)\n",
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BqLgiYS6iJfQ",
        "outputId": "ce83f7db-5765-4019-ed24-0ec1f81a5b06"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "349.8750000000001"
            ]
          },
          "execution_count": 281,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.Series(median_diff).quantile(0.025)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ShGjkmkMiJfQ",
        "outputId": "c73c1e89-0d92-466e-9b0a-30d38252035b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1320.0"
            ]
          },
          "execution_count": 282,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.Series(median_diff).quantile(0.975)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cssZEz8viJfQ"
      },
      "source": [
        "Получается что разница между медианами дохода каждой группы положительная и она статистически значимая, и лежит в пределах от 300 до 1320"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gVIQueFBiJfQ"
      },
      "source": [
        "Расчитаем CR и ARPU, ARPPU и проверим их на стат. значимое различие"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": false,
        "id": "Y1qQXpsaiJfQ",
        "outputId": "f575ed51-6047-48cf-8db9-03db329b9610"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Конверсия в контрольной группе: 5.07\n",
            "Конверсия в тестовой группе: 4.62\n",
            "Разница между контрольной и тестовой группой всех студентов: 0.46\n"
          ]
        }
      ],
      "source": [
        "cr_kon = all_pay.grp.value_counts().A / all_group_active.grp.value_counts().A * 100\n",
        "# конверсия в контрольной группе\n",
        "print(\"Конверсия в контрольной группе:\", cr_kon.round(2))\n",
        "\n",
        "# конверсия в тестовой группе\n",
        "cr_test = all_pay.grp.value_counts().B / all_group_active.grp.value_counts().B * 100\n",
        "print(\"Конверсия в тестовой группе:\", cr_test.round(2))\n",
        "\n",
        "# Разница между контрольной и тестовой группой\n",
        "dif = cr_kon - cr_test\n",
        "print(\"Разница между контрольной и тестовой группой всех студентов:\", dif.round(2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yTj7lhDOiJfR"
      },
      "source": [
        "<span style=\"color:red;\">Принимаем уровень значимости alpha = 0.05 </span> <br>\n",
        "H0 - между группами нет стат. значимых различий <br>\n",
        "H1 - между группами есть стат. значимые различия"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TYoJ6dt0iJfR"
      },
      "outputs": [],
      "source": [
        "studs_for_hi = active_studs.merge(all_group, on='id', how='inner') # соединяем датафреым\n",
        "itog = studs_for_hi.merge(checks, on='id', how='left') # соединяем с оплатами\n",
        "itog.fillna('0', inplace=True) # Убираем NaN на нули\n",
        "itog.rev = pd.to_numeric(itog.rev) # переводим rev колонку в числа\n",
        "itog['bbb'] = itog.rev != 0 # создаем колонку для вычесления тех кто платил"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qT2wRWwHiJfR",
        "outputId": "57f2b97b-5b7a-4fef-eb9a-f303bb990031"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(0.48480826522557896,\n",
              " 0.48625240457231045,\n",
              " 1,\n",
              " array([[1465.71897854,   72.28102146],\n",
              "        [6483.28102146,  319.71897854]]))"
            ]
          },
          "execution_count": 285,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scipy.stats.chi2_contingency(pd.crosstab(itog.grp,itog.bbb)) # считаем хи квадрат"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JIJejoPCiJfR"
      },
      "source": [
        "Значение pvalue превышает заданый нами, получается распределения не имеют стат значимых различий!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dW6Okdb0iJfR"
      },
      "source": [
        "Расчитаем ARPU для контрольной и тестовой групп"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PcUQI-bMiJfR",
        "outputId": "0b093786-d3ce-4aca-df85-40648750a24b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ARPU контрольной группы: 47.35\n",
            "ARPU тестовой группы: 58.06\n"
          ]
        }
      ],
      "source": [
        "ARPU = all_pay.query('grp==\"A\"').rev.sum() / all_group_active.query('grp==\"A\"').id.nunique()\n",
        "print(\"ARPU контрольной группы:\", ARPU.round(2))\n",
        "ARPU = all_pay.query('grp==\"B\"').rev.sum() / all_group_active.query('grp==\"B\"').id.nunique()\n",
        "print(\"ARPU тестовой группы:\", ARPU.round(2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ob810bKbiJfS"
      },
      "source": [
        "Сравним ARPU у контрольной и тестовой группы <br>\n",
        "<span style=\"color:red;\">Принимаем уровень значимости alpha = 0.05 </span> <br>\n",
        "H0 - нет статистически значимой разницы в доходах на одного пользователя между контрольной и тестовой группой<br>\n",
        "H1 - есть статистически значимая разница в доходах на одного пользователя между контрольной и тестовой группой"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iUxNili1iJfS"
      },
      "outputs": [],
      "source": [
        "akk = all_group_active.merge(all_pay, on='id', how='left') # создаем датафрейм для расчета ARPU\n",
        "akk.fillna('0', inplace=True) # Замена NaN на 0\n",
        "akk.rev = pd.to_numeric(akk.rev) # Изменение типа колонки на числовой формат"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3CH_pgLTiJfS"
      },
      "source": [
        "Проверим выборки на нормальность распределения среднего"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": false,
        "id": "PNhx_k15iJfS",
        "outputId": "9b404925-efec-49e8-8a62-86a49423d032"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Тест на нормальность распределения control группы: W = 0.998 , p-value = 0.000 => Нормальное\n",
            "Тест на нормальность распределения test группы: W = 1.000 , p-value = 0.014 => Нормальное\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/opt/tljh/user/lib/python3.7/site-packages/scipy/stats/morestats.py:1760: UserWarning: p-value may not be accurate for N > 5000.\n",
            "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
          ]
        }
      ],
      "source": [
        "sample_means_control = [] # сюда записывается симуляция контрольной группы\n",
        "sample_means_target = [] # сюда записывается симуляция тестовой группы\n",
        "\n",
        "for i in range(10000):     #симулируем выборку\n",
        "  sample_control = akk.query('grp_x==\"A\"').rev.sample(frac=1, replace=True) #симулируем выборку\n",
        "  sample_target = akk.query('grp_x==\"B\"').rev.sample(frac=1, replace=True) #симулируем выборку\n",
        "  sample_means_control.append(sample_control.mean()) # добавляем в созданые переменные\n",
        "  sample_means_target.append(sample_target.mean()) # добавляем в созданые переменные\n",
        "\n",
        "\n",
        "\n",
        "# check for normality by Shapiro-Wilk test #\n",
        "\n",
        "sp = shapiro(sample_means_control) # проводим тест Шапиро для того чтобы понять нормально ли распределение среднего значения в контрольной группе\n",
        "concl = '=> Не нормальное' if sp[1]>0.05 else '=> Нормальное'\n",
        "print('Тест на нормальность распределения control группы: W = %.3f' % sp[0], ', p-value = %.3f' % sp[1], concl)\n",
        "\n",
        "sp = shapiro(sample_means_target)# проводим тест Шапиро для того чтобы понять нормально ли распределение среднего значения в тестовой группе\n",
        "concl = '=>  Не нормальное' if sp[1]>0.05 else '=> Нормальное'\n",
        "print('Тест на нормальность распределения test группы: W = %.3f' % sp[0], ', p-value = %.3f' % sp[1], concl)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-ozr9-60iJfS"
      },
      "source": [
        "Распределение среднего  нормальное поэтому возьмем т-тест"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kXWc4dwJiJfT",
        "outputId": "cf81103f-c62f-4df2-b242-b0d842b2cd88"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Ttest_indResult(statistic=-1.225341107379344, pvalue=0.22048133326988403)"
            ]
          },
          "execution_count": 289,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ttest_ind(akk.query('grp_x==\"A\"').rev, akk.query('grp_x==\"B\"').rev) # Т тест для независимых выборок"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ulzLAP7xiJfT"
      },
      "source": [
        "Знак минус перед t-статистикой указывает на то, в какую сторону смещено среднее значение первой группы относительно второй. В данном случае, отрицательное значение говорит о том, что среднее значение первой группы меньше среднего значения второй группы.\n",
        "p-значение больше уровня значимости (обычно 0.05), то нет статистически значимых различий, и мы не можем отвергнуть нулевую гипотезу. В данном случае p-значение довольно высокое (больше 0.05), поэтому нет достаточных оснований отвергнуть нулевую гипотезу.\n",
        "\n",
        "Но на всякий случай перепроверим бустрапом, т.к. выборки небольшие и можно его использовать это не займет много времени"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OfXbEszqiJfT",
        "outputId": "7ab81617-7826-4615-dccb-ef1006aaa094"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "BootstrapResult(confidence_interval=ConfidenceInterval(low=34.57819681392756, high=63.84604871368595), standard_error=7.399760245607616)"
            ]
          },
          "execution_count": 290,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scipy.stats.bootstrap((akk.query('grp_x==\"A\"').rev, ), np.mean) # бустрап контрольной группы"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "l-MCIWTRiJfT",
        "outputId": "b8cd3f93-0959-4ca0-a1a6-93bee1516b6d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "BootstrapResult(confidence_interval=ConfidenceInterval(low=51.10018316573677, high=65.9136870503895), standard_error=3.7566645050320693)"
            ]
          },
          "execution_count": 291,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scipy.stats.bootstrap((akk.query('grp_x==\"B\"').rev, ), np.mean) # бустрап тестовой группы"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S-EAtTA2iJfU"
      },
      "source": [
        "Контрольная и тестовая группы пересекаются значит принимаем H0, нет статистически значимой разницы в доходах на одного пользователя между контрольной и тестовой группой"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "60qSUGkviJfU"
      },
      "source": [
        "Расчитаем ARPPU"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8PLp0DkfiJfU",
        "outputId": "ae5043d1-1b85-4884-9eab-409f84b10ab6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ARPPU контрольной группы: 933.59\n",
            "ARPPU тестовой группы: 1257.88\n"
          ]
        }
      ],
      "source": [
        "ARPPU = all_pay.query('grp==\"A\"').rev.sum() / all_pay.query('grp==\"A\"').id.nunique()\n",
        "print(\"ARPPU контрольной группы:\", ARPPU.round(2))\n",
        "ARPPU = all_pay.query('grp==\"B\"').rev.sum() / all_pay.query('grp==\"B\"').id.nunique()\n",
        "print(\"ARPPU тестовой группы:\", ARPPU.round(2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u-LcwbykiJfU"
      },
      "source": [
        "Сравним ARPU у контрольной и тестовой группы <br>\n",
        "<span style=\"color:red;\">Принимаем уровень значимости alpha = 0.05 </span> <br>\n",
        "H0 - нет статистически значимой разницы в доходах на одного пользователя между контрольной и тестовой группой<br>\n",
        "H1 - есть статистически значимая разница в доходах на одного пользователя между контрольной и тестовой группой"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fi_9Drb_iJfU"
      },
      "source": [
        "Проверим выборки на нормальность распределения среднего"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TVC38v3fiJfU",
        "outputId": "048c881a-9c4b-4c94-9c87-34feba83c880"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Тест на нормальность распределения control группы: W = 0.998 , p-value = 0.000 => Нормальное\n",
            "Тест на нормальность распределения test группы: W = 1.000 , p-value = 0.321 =>  Не нормальное\n"
          ]
        }
      ],
      "source": [
        "sample_means_control = [] # сюда записывается симуляция контрольной группы\n",
        "sample_means_target = [] # сюда записывается симуляция тестовой группы\n",
        "\n",
        "for i in range(10000):     #симулируем выборку\n",
        "  sample_control = all_pay.query('grp==\"A\"').rev.sample(frac=1, replace=True) #симулируем выборку\n",
        "  sample_target = all_pay.query('grp==\"B\"').rev.sample(frac=1, replace=True) #симулируем выборку\n",
        "  sample_means_control.append(sample_control.mean()) # добавляем в созданые переменные\n",
        "  sample_means_target.append(sample_target.mean()) # добавляем в созданые переменные\n",
        "\n",
        "\n",
        "\n",
        "# check for normality by Shapiro-Wilk test #\n",
        "\n",
        "sp = shapiro(sample_means_control) # проводим тест Шапиро для того чтобы понять нормально ли распределение среднего значения в контрольной группе\n",
        "concl = '=> Не нормальное' if sp[1]>0.05 else '=> Нормальное'\n",
        "print('Тест на нормальность распределения control группы: W = %.3f' % sp[0], ', p-value = %.3f' % sp[1], concl)\n",
        "\n",
        "sp = shapiro(sample_means_target)# проводим тест Шапиро для того чтобы понять нормально ли распределение среднего значения в тестовой группе\n",
        "concl = '=>  Не нормальное' if sp[1]>0.05 else '=> Нормальное'\n",
        "print('Тест на нормальность распределения test группы: W = %.3f' % sp[0], ', p-value = %.3f' % sp[1], concl)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": false,
        "id": "9iReO0KjiJfV",
        "outputId": "42a87334-082b-40dc-ecd9-e921de01f716"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "BootstrapResult(confidence_interval=ConfidenceInterval(low=752.8081150697996, high=1167.3284288006312), standard_error=103.84959210411917)"
            ]
          },
          "execution_count": 294,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scipy.stats.bootstrap((all_pay.query('grp==\"A\"').rev, ), np.mean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Uv4bnIQbiJfV",
        "outputId": "1806f72b-dbc3-4c24-c3f9-b16dddd741cc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "BootstrapResult(confidence_interval=ConfidenceInterval(low=1171.9147997467198, high=1346.8192779739127), standard_error=44.84051857314195)"
            ]
          },
          "execution_count": 295,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scipy.stats.bootstrap((all_pay.query('grp==\"B\"').rev, ), np.mean)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sznFMwOaiJfV"
      },
      "source": [
        "Интервалы не пересекаются значит можно сделать вывод что средний доход от одного платящего пользователя между контрольной и тестовой группой имеют различия"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7CMZCkVGiJfV"
      },
      "source": [
        "# ВЫВОД"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xwUyr_gciJfV"
      },
      "source": [
        "Можно сделать новую модель оплаты. Повысит доход.\n",
        "\n",
        "Конверсия:\n",
        "-----------\n",
        "Показатели конверсии статистически значимо не отличаются между контрольной и тестовой группами. Это означает, что новая механика не оказала значительного влияния на привлечение пользователей к определенным действиям.\n",
        "\n",
        "Доход на одного пользователя:\n",
        "-----------\n",
        "Статистические данные указывают на то, что доход на одного пользователя статистически значимо не различается между контрольной и тестовой группами.\n",
        "\n",
        "Доход на одного платящего пользователя:\n",
        "-----------\n",
        "Важное наблюдение заключается в том, что доход на одного платящего пользователя статистически значимо различается между группами. Это может указывать на потенциальные изменения в поведении пользователей, которые производят платежи.\n",
        "Доход по группам:\n",
        "-----------\n",
        "Статистические данные указывают на то, что медиана дохода в контрольной и тестовой группе имеют различия, что в свою очередь указывает на стат. значимые различия по доходу в группах при симуляции выборок через бустрап.\n",
        "\n",
        "Дополнительные проверки:\n",
        "-----------\n",
        "Отмечено необходимость проведения дополнительных проверок, включая анализ наличия оплат подписок в дни эксперимента, а также исследование характеристик 149 пользователей, которые могут вносить перекосы в данные.\n",
        "\n",
        "Предложение провести еще один A/B тест:\n",
        "-----------\n",
        "Рекомендуется провести еще один A/B тест с целью исключить возможные перекосы и собрать более корректные данные перед реализацией новой модели оплаты."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DEdK4Aq9iJfV"
      },
      "source": [
        "# Задание 2. SQL\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ldqdX4MiiJfW"
      },
      "source": [
        "2.1 Очень усердные ученики.\n",
        "\n",
        "2.1.1 Условие\n",
        "\n",
        "Образовательные курсы состоят из различных уроков, каждый из которых состоит из нескольких маленьких заданий. <br>\n",
        "Каждое такое маленькое задание называется \"горошиной\".\n",
        "\n",
        "Назовём очень усердным учеником того пользователя, который хотя бы раз за текущий месяц правильно решил 20 горошин."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CpO1WJHAiJfW"
      },
      "source": [
        "Необходимо написать оптимальный запрос, который даст информацию о количестве очень усердных студентов.<br>\n",
        "NB! Под усердным студентом мы понимаем студента, который правильно решил 20 задач за текущий месяц.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7-GV9agMiJfW"
      },
      "source": [
        "Создаем соединение с SQL"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sYNv-v8ViJfW"
      },
      "outputs": [],
      "source": [
        "connection_default = {'host': 'https://clickhouse.lab.karpov.courses',\n",
        "                      'database':'default.peas',\n",
        "                      'user':'student',\n",
        "                      'password':'dpo_python_2020'\n",
        "                     }"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uQDYtxHqiJfW"
      },
      "source": [
        "В данном запросе не учитывается месяц так как данные и так за 2 дня этого месяца."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": false,
        "id": "EG3MXRVoiJfW",
        "outputId": "dddfb126-346a-4a79-edcb-7b4e740ec9a0"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hard_student</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>136</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   hard_student\n",
              "0           136"
            ]
          },
          "execution_count": 297,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# создаем запрос, db автоматически заменится на значение из database\n",
        "q = '''\n",
        "    SELECT\n",
        "    COUNT(DISTINCT st_id) AS hard_student\n",
        "FROM (\n",
        "SELECT\n",
        "    st_id\n",
        "FROM\n",
        "    default.peas\n",
        "GROUP BY\n",
        "    st_id\n",
        "HAVING\n",
        "    SUM(correct) >= 20\n",
        "    )\n",
        "    '''\n",
        "\n",
        "# отправляем запрос и записываем результат в пандасовский датафрейм\n",
        "q_test = ph.read_clickhouse(query=q, connection=connection_default)\n",
        "q_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4hlqu_sIiJfX"
      },
      "outputs": [],
      "source": [
        "connection_default_2 = {'host': 'https://clickhouse.lab.karpov.courses',\n",
        "                      'database':['default.peas', 'default.studs', 'default.final_project_check'],\n",
        "                      'user':'student',\n",
        "                      'password':'dpo_python_2020'\n",
        "                     }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "pll3LW5uiJfX",
        "outputId": "8c36914e-9568-49a6-c4a7-e1f786cee541"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>groups</th>\n",
              "      <th>ARPU</th>\n",
              "      <th>ARPAU</th>\n",
              "      <th>cr</th>\n",
              "      <th>cr_activ</th>\n",
              "      <th>cr_activ_math_byu</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>control</td>\n",
              "      <td>4540.98</td>\n",
              "      <td>10393.70</td>\n",
              "      <td>4.92</td>\n",
              "      <td>11.02</td>\n",
              "      <td>6.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>pilot</td>\n",
              "      <td>11508.47</td>\n",
              "      <td>29739.58</td>\n",
              "      <td>10.85</td>\n",
              "      <td>26.04</td>\n",
              "      <td>9.52</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    groups      ARPU     ARPAU     cr  cr_activ  cr_activ_math_byu\n",
              "0  control   4540.98  10393.70   4.92     11.02               6.12\n",
              "1    pilot  11508.47  29739.58  10.85     26.04               9.52"
            ]
          },
          "execution_count": 299,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# создаем запрос, db автоматически заменится на значение из database\n",
        "q = '''\n",
        "SELECT\n",
        "    B.test_grp AS groups, -- указание тестовой и контрольной группы\n",
        "    round(SUM(C.money_1) / COUNT(DISTINCT B.st_id), 2) AS ARPU, -- доход на одного пользователя\n",
        "    round(sumIf(C.money_1, A.cor > 10) / uniqExactIf(B.st_id, A.cor > 10), 2) AS ARPAU, -- доход на одного активного пользователя\n",
        "    round(countIf(C.st_id, C.money_1 > 0) / COUNT(DISTINCT B.st_id) * 100, 2) AS cr, -- конверсия пользователя\n",
        "    round(uniqExactIf(C.st_id, A.cor > 10 AND C.money_1 > 0) / uniqExactIf(B.st_id, A.cor > 10) * 100, 2) AS cr_activ, -- конверсия активных пользователей\n",
        "    round(uniqExactIf(A.st_id, A.math>=2 AND C.math > 0) / uniqExactIf(A.st_id, A.math>= 2) * 100, 2) AS cr_activ_math_byu -- конверсия активных по математике\n",
        "FROM\n",
        "    (\n",
        "    SELECT\n",
        "        st_id,\n",
        "        SUM(correct) AS cor,\n",
        "        sumIf(correct, subject = 'Math') as math\n",
        "    FROM\n",
        "        default.peas\n",
        "    GROUP BY\n",
        "        st_id\n",
        "    ) AS A\n",
        "\n",
        "--соединяем таблицу с группами\n",
        "\n",
        "RIGHT JOIN\n",
        "    default.studs AS B ON A.st_id = B.st_id\n",
        "\n",
        "-- соединяем таблицу с деньгами, сгруппированную по ст ид\n",
        "LEFT JOIN\n",
        "    (\n",
        "    SELECT\n",
        "        st_id,\n",
        "        SUM(money) AS money_1,\n",
        "        sumIf(money, subject = 'Math') AS math\n",
        "    FROM\n",
        "        default.final_project_check\n",
        "    GROUP BY\n",
        "        st_id\n",
        "    ) AS C ON B.st_id = C.st_id\n",
        "GROUP BY\n",
        "    B.test_grp\n",
        "    '''\n",
        "\n",
        "# отправляем запрос и записываем результат в пандасовский датафрейм\n",
        "q_test = ph.read_clickhouse(query=q, connection=connection_default_2)\n",
        "q_test"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NwhE5uu5iJfX"
      },
      "source": [
        "# Задание 3. Python\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-OuoVbMMiJfX"
      },
      "source": [
        "3.1 Задача\n",
        "\n",
        "Реализуйте функцию, которая будет автоматически подгружать информацию из дополнительного файла groups_add.csv (заголовки могут отличаться) и на основании дополнительных параметров пересчитывать метрики.\n",
        "Реализуйте функцию, которая будет строить графики по получаемым метрикам."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p_pvwq5tiJfX"
      },
      "outputs": [],
      "source": [
        "path_to_file = ('groups_add.csv') # задается аргумент для функции с названием файла"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9IEFH9WuiJfX"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "def calculate(path_to_file):\n",
        "\n",
        "    try:\n",
        "        # Импорт данных\n",
        "        groups = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-ni-m/final_project/groups.csv', sep=';') # файл с информацией о принадлежности пользователя к контрольной или экспериментальной группе (А – контроль, B – целевая группа)\n",
        "        groups_add = pd.read_csv(path_to_file) # дополнительный файл с пользователями, который вам прислали спустя 2 дня после передачи данных\n",
        "        active_studs = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-ni-m/final_project/active_studs.csv') # файл с информацией о пользователях, которые зашли на платформу в дни проведения\n",
        "        checks = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-ni-m/final_project/checks.csv', sep=';') # файл с информацией об оплатах пользователей в дни проведения эксперимента\n",
        "        #переименуем колонки\n",
        "        checks = checks.rename(columns={'student_id': 'id'})\n",
        "        active_studs = active_studs.rename(columns={'student_id': 'id'})\n",
        "\n",
        "        all_group = pd.concat([groups, groups_add]) # соединяем груп + груп адс\n",
        "        # мерджим таблицу с группами и таблицу с активными студентами через иннер(берем пересечения в обеих таблицах)\n",
        "        all_group_active = all_group.merge(active_studs, how='right', on='id') # активные студенты разделенные по группам\n",
        "        # Активные студенты которые принесли доход\n",
        "        all_pay = all_group_active.merge(checks, how='inner', on='id')\n",
        "\n",
        "        # расчеты метрик конверсия, ARPU, ARPPU, доход\n",
        "        rev_kon = all_pay.query('grp==\"A\"').rev.sum() # контрольная группа\n",
        "        rev_test = all_pay.query('grp==\"B\"').rev.sum() # тестовая группа\n",
        "        cr_kon = all_pay.grp.value_counts().A / all_group_active.grp.value_counts().A * 100\n",
        "        cr_test = all_pay.grp.value_counts().B / all_group_active.grp.value_counts().B * 100\n",
        "        ARPU_con = all_pay.query('grp==\"A\"').rev.sum() / all_group_active.query('grp==\"A\"').id.nunique()\n",
        "        ARPU_test = all_pay.query('grp==\"B\"').rev.sum() / all_group_active.query('grp==\"B\"').id.nunique()\n",
        "        ARPPU_con = all_pay.query('grp==\"A\"').rev.sum() / all_pay.query('grp==\"A\"').id.nunique()\n",
        "        ARPPU_test = all_pay.query('grp==\"B\"').rev.sum() / all_pay.query('grp==\"B\"').id.nunique()\n",
        "        # создадим датафрейм для отображения метрик\n",
        "        data = pd.DataFrame({'Group': ['A', 'B'], 'Conversion': [cr_kon, cr_test], 'ARPU': [ARPU_con, ARPU_test], 'ARPPU': [ARPPU_con, ARPPU_test], 'Revenue': [rev_kon, rev_test]})\n",
        "        data.to_csv('data.csv', index=False)\n",
        "        return data\n",
        "    except Exception as e: # если функция не сработает вывести тип ошибки\n",
        "        print(\"Error\", f\"An error occurred: {str(e)}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "sygtUyXkiJfY",
        "outputId": "e6ac69cc-99af-442b-f2ad-ea31e48d006a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Group</th>\n",
              "      <th>Conversion</th>\n",
              "      <th>ARPU</th>\n",
              "      <th>ARPPU</th>\n",
              "      <th>Revenue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A</td>\n",
              "      <td>5.071521</td>\n",
              "      <td>47.347204</td>\n",
              "      <td>933.589744</td>\n",
              "      <td>72820.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>B</td>\n",
              "      <td>4.615611</td>\n",
              "      <td>58.058798</td>\n",
              "      <td>1257.878992</td>\n",
              "      <td>394974.0035</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  Group  Conversion       ARPU        ARPPU      Revenue\n",
              "0     A    5.071521  47.347204   933.589744   72820.0000\n",
              "1     B    4.615611  58.058798  1257.878992  394974.0035"
            ]
          },
          "execution_count": 302,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "calculate(path_to_file) # результат запуска"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SB2S_U7ziJfY"
      },
      "source": [
        "### Функция для визулизации"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WbsaJciDiJfY"
      },
      "outputs": [],
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "def visual():\n",
        "    data = pd.read_csv('data.csv')\n",
        "\n",
        "    # Создаем отдельные графики для каждой метрики\n",
        "    fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
        "    fig.suptitle('Сравнение показателей: контрольная группа (A) и тестовая группа (B)')\n",
        "\n",
        "    # График для конверсии\n",
        "    sns.barplot(x='Group', y='Conversion', data=data, ax=axes[0, 0], ci=None, palette='pastel')\n",
        "    axes[0, 0].set_title('Conversion')\n",
        "\n",
        "    # График для ARPU\n",
        "    sns.barplot(x='Group', y='ARPU', data=data, ax=axes[0, 1], ci=None, palette='pastel')\n",
        "    axes[0, 1].set_title('ARPU')\n",
        "\n",
        "    # График для ARPPU\n",
        "    sns.barplot(x='Group', y='ARPPU', data=data, ax=axes[1, 0], ci=None, palette='pastel')\n",
        "    axes[1, 0].set_title('ARPPU')\n",
        "\n",
        "    # График для дохода\n",
        "    sns.barplot(x='Group', y='Revenue', data=data, ax=axes[1, 1], ci=None, palette='pastel')\n",
        "    axes[1, 1].set_title('Revenue')\n",
        "\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kl-VFx9fiJfY"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "44BfKhl9iJfZ"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}